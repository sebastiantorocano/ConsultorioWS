package formularios;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Sebastian Galeano Bolivar
 * @author Sebastian Toro Cano
 */
public class frmUsuarios extends javax.swing.JFrame {

    /**
     * Creates new form frmUsuarios
     */
    public frmUsuarios() {
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcmbCargo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtNombres = new javax.swing.JTextField();
        txtApellido1 = new javax.swing.JTextField();
        pswContraseña = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btninactivar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnactivar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jcmbEspecialidad = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        txtApellido2 = new javax.swing.JTextField();

        jLabel1.setText("* Identificación");

        jLabel2.setText("* Nombres");

        jLabel3.setText("* Primer apellido");

        jcmbCargo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione un cargo.", "Odontólogo", "Auxiliar", "Administrador" }));
        jcmbCargo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbCargoItemStateChanged(evt);
            }
        });
        jcmbCargo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmbCargoActionPerformed(evt);
            }
        });

        jLabel4.setText("* Cargo");

        jLabel5.setText("* Contraseña");

        txtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIdKeyPressed(evt);
            }
        });

        txtNombres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtNombresMouseClicked(evt);
            }
        });

        jLabel7.setText("Usuarios");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setToolTipText("Guardar ");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btninactivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/borrar.png"))); // NOI18N
        btninactivar.setText("Inactivar");
        btninactivar.setToolTipText("Inactivar");
        btninactivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btninactivarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buscar.png"))); // NOI18N
        btnBuscar.setText("Consultar");
        btnBuscar.setToolTipText("Buscar ");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/modificar.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setToolTipText("Modificar ");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancelar.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setToolTipText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnactivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/nuevo.png"))); // NOI18N
        btnactivar.setText("Activar");
        btnactivar.setToolTipText("Activar");
        btnactivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnactivarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnactivar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btninactivar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGuardar)
                .addGap(18, 18, 18)
                .addComponent(btnModificar)
                .addGap(18, 18, 18)
                .addComponent(btnactivar)
                .addGap(18, 18, 18)
                .addComponent(btninactivar)
                .addGap(18, 18, 18)
                .addComponent(btnBuscar)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabel8.setText("Todos los campos marcados con (*) son obligatorios.");

        jLabel9.setText("Especialidad");

        jcmbEspecialidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione una especialidad.", "Ortodoncia.", "Endodoncia.", "Periodoncia.", "Cirugía oral y Maxilofacial.", "Estomatología.", "Operatoria.", "Implantología.", " " }));

        jLabel10.setText("* Segundo apellido");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pswContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcmbEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcmbCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtApellido2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtApellido1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(61, 61, 61)))
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtApellido1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(txtApellido2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(47, 47, 47)
                                        .addComponent(jLabel9))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(jcmbCargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addComponent(jcmbEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel5)
                                            .addComponent(pswContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        String id, nombres, apellido1,apellido2, cargo,especialidad;
     
        boolean res;
        
        SNumeros(txtId);

        //obtiene los valores de los campos
        id = txtId.getText();
        nombres = txtNombres.getText();
        apellido1 = txtApellido1.getText();
        apellido2 = txtApellido2.getText();
        cargo = (String) jcmbCargo.getSelectedItem();
        especialidad=(String)jcmbEspecialidad.getSelectedItem();
        String contraseña = new String(pswContraseña.getPassword());
       
        
        
         if(buscarcedula()==true){
        JOptionPane.showMessageDialog(rootPane, "La cédula ingresada ya se encuentra en el sistema");
        return;
        }


        /*
         * Valida que cada uno de los campos no este vacio
         */
        if (txtId.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar una identificación de usuario");
            txtId.requestFocusInWindow();
            return;
        }

        if (txtNombres.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar un nombre de usuario");
            txtNombres.requestFocusInWindow();
            return;
        }

        if (txtApellido1.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar el primer apellido del usuario");
            txtApellido1.requestFocusInWindow();
            return;
        }
        
        if (txtApellido2.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar el segundo apellido  del usuario");
            txtApellido2.requestFocusInWindow();
            return;
        }

        if (cargo.equals("Seleccione un cargo.")) {
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar un cargo");
            jcmbCargo.requestFocusInWindow();
            return;
        }
        
       
        
        
        
     
        if (pswContraseña.getPassword().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar una contraseña de usuario");
            pswContraseña.requestFocusInWindow();
            return;
        }



        //Validaciones de limite de campos
        if (txtId.getText().length() > 15) {
            JOptionPane.showMessageDialog(rootPane, "El limite de caracteres del campo cédula es 15");
            return;
        }

        if (txtNombres.getText().length() > 50) {
            JOptionPane.showMessageDialog(rootPane, "El limite de caracteres del campo nombres es 50");
            return;
        }

        if (txtApellido1.getText().length() > 50) {
            JOptionPane.showMessageDialog(rootPane, "El limite de caracteres del campo apellidos es 50");
            return;
        }
        
        if (txtApellido2.getText().length() > 50) {
            JOptionPane.showMessageDialog(rootPane, "El limite de caracteres del campo apellidos es 50");
            return;
        }
        
        if(pswContraseña.getText().length()>20){
         JOptionPane.showMessageDialog(rootPane, "El limite de caracteres del campo contraseña es 20");
            return;
        }
        
        
            
            

            
            
            
        conectar cc = new conectar();
        Connection cn = cc.conexion();
        String sql = "";

        sql = "INSERT INTO usuarios(cedula_usuario,nombre_usuario,p_apellido_usuario,s_apellido_usuario,cargo_usuario,especialidad_usuario,contrasena)"
                + "VALUES(?,?,?,?,?,?,?)";

        try {
            PreparedStatement sts = (PreparedStatement) cn.prepareStatement(sql);
            sts.setString(1, id);
            sts.setString(2, nombres);
            sts.setString(3, apellido1);
            sts.setString(4, apellido2);
            sts.setString(5, cargo);
            sts.setString(6, especialidad);
            sts.setString(7, contraseña);
           

            int R = sts.executeUpdate();
            if (R > 0) {
                JOptionPane.showMessageDialog(null, "Usuario guardado con éxito");
            }
        } catch (SQLException ex) {
            Logger.getLogger(frmUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }

        limpiarc();


    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btninactivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btninactivarActionPerformed
        int rta = JOptionPane.showConfirmDialog(rootPane, "¿Esta seguro de Inactivar el registro?");
        if (rta != 0) {
            return;
        }

        conectar cc = new conectar();
        Connection cn = cc.conexion();
        String sql = "";

        try {
            sql = //"DELETE FROM usuarios WHERE cedula_usuario=" + txtId.getText();
                    "UPDATE usuarios SET estado='" + 0+"'"
                    + "WHERE cedula_usuario= '" + txtId.getText()+"'";;
                    
            PreparedStatement st = cn.prepareStatement(sql);
            st.executeUpdate();

            JOptionPane.showMessageDialog(null, "Inactivar con éxito");

        } catch (Exception ex) {
            Logger.getLogger(frmUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }

        limpiarc();
        txtId.setEnabled(true);
    }//GEN-LAST:event_btninactivarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        if (txtId.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar la identificación del usuario");
        }
        
        
        if(buscarcedula()==false){
        JOptionPane.showMessageDialog(rootPane, "La Identificación del paciente no se encuentra registrada");
        }
        
        txtId.setEnabled(false);
       

        conectar cc = new conectar();
        Connection cn = cc.conexion();

        String sql = "";

        String registro[] = new String[7];
        try {
            sql = "SELECT * FROM usuarios Where cedula_usuario=" + txtId.getText();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            
            

            while (rs.next()) {
                registro[0] = rs.getString("cedula_usuario");
                registro[1] = rs.getString("nombre_usuario");
                registro[2] = rs.getString("p_apellido_usuario");
                registro[3] = rs.getString("s_apellido_usuario");
                registro[4] = rs.getString("cargo_usuario");
                registro[5] = rs.getString("especialidad_usuario");
                registro[6] = rs.getString("contrasena");
                
            }
            
           
            txtId.setText(registro[0]);
            txtNombres.setText(registro[1]);
            txtApellido1.setText(registro[2]);
            txtApellido2.setText(registro[3]);
            jcmbCargo.setSelectedItem(registro[4]);
            jcmbEspecialidad.setSelectedItem(registro[5]);
            pswContraseña.setText(registro[6]);
            

        } catch (Exception ex) {
            Logger.getLogger(frmUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limpiarc();
        
        txtId.setEnabled(true);
        

    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        conectar cc = new conectar(); //Se crea una instancia de la clase conectar
        Connection cn = cc.conexion();
        
        String id, nombres, apellido1,apellido2, cargo,especialidad;
        String sql = "";

        //obtiene los valores de los campos
        id = txtId.getText();
        nombres = txtNombres.getText();
        apellido1 = txtApellido1.getText();
        apellido2 = txtApellido2.getText();
        cargo = (String) jcmbCargo.getSelectedItem();
        especialidad = (String) jcmbEspecialidad.getSelectedItem();
        String contraseña = new String(pswContraseña.getPassword());
     
        
       int rta = JOptionPane.showConfirmDialog(rootPane, "¿Esta seguro de modificar la información?");
        if (rta != 0) {
            return;
        }
        
        
        
        try {
            PreparedStatement pst = cn.prepareStatement("UPDATE usuarios SET cedula_usuario='" + txtId.getText()
                    + "', nombre_usuario='" + nombres
                    + "',p_apellido_usuario='" + apellido1
                    + "',s_apellido_usuario='" + apellido2
                    + "',cargo_usuario='" + cargo
                    + "',especialidad_usuario='" + especialidad
                    + "',contrasena='" + contraseña
                    + "'  WHERE cedula_usuario='" + id + "'");

            pst.executeUpdate();
            if (pst.executeUpdate() == 1) {
                JOptionPane.showMessageDialog(null, "Modificado con éxito");
            } else {
                JOptionPane.showMessageDialog(null, "Error al modificar");
            }

        } catch (Exception ex) {
            Logger.getLogger(frmUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        limpiarc();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void txtNombresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNombresMouseClicked
        /*  boolean r = Buscar_Id();
         String id;
         String sql = "";

         id = txtId.getText();

         if (r == false) {
         }
         JOptionPane.showMessageDialog(rootPane, "Ya existe ese usuario");
         txtId.requestFocusInWindow();*/
    }//GEN-LAST:event_txtNombresMouseClicked

    private void jcmbCargoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmbCargoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcmbCargoActionPerformed

    private void txtIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdKeyPressed
       SNumeros(txtId);
    }//GEN-LAST:event_txtIdKeyPressed

    private void jcmbCargoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbCargoItemStateChanged
         metodo();
    }//GEN-LAST:event_jcmbCargoItemStateChanged

    private void btnactivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnactivarActionPerformed
        conectar cc = new conectar();
        Connection cn = cc.conexion();
        String sql = "";

        try {
            sql = //"DELETE FROM usuarios WHERE cedula_usuario=" + txtId.getText();
                    "UPDATE usuarios SET estado='" + 1+"'"
                    + "WHERE cedula_usuario= '" + txtId.getText()+"'";
                    
            PreparedStatement st = cn.prepareStatement(sql);
            st.executeUpdate();

            JOptionPane.showMessageDialog(null, "Activar con éxito");

        } catch (Exception ex) {
            Logger.getLogger(frmUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }

        limpiarc();
        txtId.setEnabled(true);
        
    }//GEN-LAST:event_btnactivarActionPerformed

    /**
     * Funcion que busca un id de la base de datos
     *
     *
     * @return verdadero si el id a buscar existe, false si el id a buscar no
     * existe
     */
    
 
   
    
    private void metodo() {
        int op = jcmbCargo.getSelectedIndex();
        if (op != -1) {
            switch (op) {
                case 0:
                    
                    break;
                case 1:
                    jcmbEspecialidad.setEnabled(true);
                    break;
                case 2:
                    jcmbEspecialidad.setEnabled(false);
                    break;
                    
                case 3:
                    jcmbEspecialidad.setEnabled(false);
                    break;
            }
        }
 
    }
    
    /**
     * 
     * @return retorna si, si se encuentra la cedula del usuario a guardar
     */
    public boolean buscarcedula(){
        
        boolean si=false;
        try {
            conectar cc = new conectar();
            Connection cn = cc.conexion();
            
            String sql="";
         
                sql = "SELECT cedula_usuario FROM usuarios Where cedula_usuario=" + txtId.getText();
                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                
                if(rs.next()){
                si=true;
                }
                
                
        } catch (SQLException ex) {
            Logger.getLogger(frmUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
            
         return si;

           
    }
   

    /**
     * Metodo para limpiar los campos de la ventana
     */
    public void limpiarc() {
        txtId.setText("");
        txtNombres.setText("");
        txtApellido1.setText("");
         txtApellido2.setText("");
        jcmbCargo.setSelectedIndex(0);
        jcmbEspecialidad.setSelectedIndex(0);
        pswContraseña.setText("");
      

    }

    /**
     * Metodo para habilitar los campos de la ventana
     */
    public void habilitar() {
        txtId.setEnabled(true);
        txtNombres.setEnabled(true);
        txtApellido1.setEnabled(true);
        txtApellido2.setEnabled(true);
        jcmbCargo.setEnabled(true);
        pswContraseña.setEnabled(true);
        

    }

    /**
     * Metodo para inhabilitar los campos de la ventana
     */
    public void inhabilitar() {
        txtId.setEnabled(false);
        txtNombres.setEnabled(false);
        txtApellido1.setEnabled(false);
        txtApellido2.setEnabled(false);
        jcmbCargo.setEnabled(false);
        pswContraseña.setEnabled(false);
        

    }

    /**
     *
     * Metodo que no deja ingresar otro tipo de datos diferentes a numero en un
     * campo de texto
     *
     * @param a Toma del JTextField los datos y valida que sean solo numeros
     */
    public void SNumeros(JTextField a) {
        a.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) {
                    getToolkit().beep();
                    e.consume();
                }
            }
        });
    }

    /**
     *
     * Metodo que no deja ingresar otro tipo de datos diferentes a letras en un
     * campo de texto
     *
     * @param a información en el campo de texto
     */
    public void SLetras(JTextField a) {
        a.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (Character.isDigit(c)) {
                    getToolkit().beep();
                    e.consume();
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnactivar;
    private javax.swing.JButton btninactivar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox jcmbCargo;
    private javax.swing.JComboBox jcmbEspecialidad;
    private javax.swing.JPasswordField pswContraseña;
    private javax.swing.JTextField txtApellido1;
    private javax.swing.JTextField txtApellido2;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombres;
    // End of variables declaration//GEN-END:variables
}
