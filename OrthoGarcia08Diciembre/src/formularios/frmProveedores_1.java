package formularios;

//import com.sun.jndi.cosnaming.CNCtx;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JTextField;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Sebastian Galeano Bolivar
 * @author Sebastian Toro Cano
 * @version 1
 */
public class frmProveedores_1 extends javax.swing.JFrame{

    DefaultTableModel modelo;
    String cedula_usuario = frmIngresar.obtener_usuario();
    public TableRowSorter tsrfiltro;

    /**
     * Creates new form Proveedores
     */
    public frmProveedores_1() {
        initComponents();
        Limpiar();

        iniciar_tabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jbreporte = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtNombrep = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtContactop = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDireccionp = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        btnProductos_asociados = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setTitle("Proveedores");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setToolTipText("Guardar ");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/modificar.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setToolTipText("Modificar ");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/borrar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setToolTipText("Eliminar ");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buscar.png"))); // NOI18N
        btnBuscar.setText("Consultar");
        btnBuscar.setToolTipText("Buscar ");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancelar.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setToolTipText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jbreporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/nuevo.png"))); // NOI18N
        jbreporte.setText("Reporte");
        jbreporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbreporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbreporte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnGuardar)
                .addGap(18, 18, 18)
                .addComponent(btnModificar)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar)
                .addGap(18, 18, 18)
                .addComponent(btnBuscar)
                .addGap(28, 28, 28)
                .addComponent(btnCancelar)
                .addGap(26, 26, 26)
                .addComponent(jbreporte, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jLabel1.setText("* Nombre");

        txtNombrep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNombrepKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNombrepKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombrepKeyTyped(evt);
            }
        });

        jLabel2.setText("* Contacto");

        txtContactop.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtContactopKeyPressed(evt);
            }
        });

        jLabel3.setText("* Dirección");

        jLabel5.setText(" Proveedores");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Contacto", "Dirección"
            }
        ));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        btnProductos_asociados.setText("Ver productos asociados");
        btnProductos_asociados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductos_asociadosActionPerformed(evt);
            }
        });

        jLabel9.setText("Todos los campos marcados con (*) son obligatorios.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNombrep, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDireccionp, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtContactop, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnProductos_asociados))))
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txtNombrep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnProductos_asociados, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(txtContactop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtDireccionp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGap(86, 86, 86)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        /*
         * Valida que cada uno de los campos no este vacio
         */

        if (txtNombrep.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar un nombre de proveedor");
            txtNombrep.requestFocusInWindow();
            return;
        }

        if (txtContactop.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar un contacto de proveedor");
            txtContactop.requestFocusInWindow();
            return;
        }

        if (txtDireccionp.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar una dirección  de proveedor");
            txtDireccionp.requestFocusInWindow();
            return;
        }

        if (txtNombrep.getText().length() > 50) {
            JOptionPane.showMessageDialog(rootPane, "El limite de caracteres del campo nombre es 50");
            return;
        }

        if (txtContactop.getText().length() > 15) {
            JOptionPane.showMessageDialog(rootPane, "El limite de caracteres del campo contacto es 15");
            return;
        }

        if (txtDireccionp.getText().length() > 50) {
            JOptionPane.showMessageDialog(rootPane, "El limite de caracteres del campo dirección es 50");
            return;
        }

        int siguiente_id = Nuevo_Codigo();

        conectar cc = new conectar();   //Se crea una instancia de la clase conectar
        Connection cn = cc.conexion();  //se crea una instancia de la clase Connection y se concatena el objeto cc
        String nombre, contacto, direccion, producto, usuario, next_cod;
        String sql = "";
        String sql2 = "";

        nombre = txtNombrep.getText();
        contacto = txtContactop.getText();
        direccion = txtDireccionp.getText();
        usuario = frmIngresar.txtcedula.getText();
        
        //valida la exixtencia del proveedor a almacenar
       if( BuscarExistenciaProveedor(nombre)!=0){
       JOptionPane.showMessageDialog(rootPane,"El nombre del proveedor ya se encuentra almacenado" );
      return;
       }
       
       
        next_cod = Integer.toString(siguiente_id);
        
        

        sql = "INSERT INTO proveedores(id_proveedor,nombre_proveedor,contacto_proveedor,direccion_proveedor,id_usuario_proveedor) VALUES (?,?,?,?,?)";

        try {

            PreparedStatement st = cn.prepareStatement(sql);
            st.setString(1, next_cod);
            st.setString(2, nombre);
            st.setString(3, contacto);
            st.setString(4, direccion);
            st.setString(5, usuario);

            int R = st.executeUpdate();
            if (R > 0) {
                JOptionPane.showMessageDialog(null, "Registro ingresado con éxito");

                Limpiar();
            }

        } catch (SQLException ex) {
            Logger.getLogger(frmProveedores_1.class.getName()).log(Level.SEVERE, null, ex);
        }

        Limpiar();


    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed

        SNumeros(txtContactop);
        SLetras(txtNombrep);

        conectar cc = new conectar(); //Se crea una instancia de la clase conectar
        Connection cn = cc.conexion(); //se crea una instancia de la clase Connection y se concatena el objeto cc
        String nombre, contacto, direccion, producto;
        String sql = "";

        nombre = txtNombrep.getText();
        contacto = txtContactop.getText();
        direccion = txtDireccionp.getText();

         /*
         * Valida que cada uno de los campos no este vacio
         */

        if (txtNombrep.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar un nombre de proveedor");
            txtNombrep.requestFocusInWindow();
            return;
        }

        if (txtContactop.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar un contacto de proveedor");
            txtContactop.requestFocusInWindow();
            return;
        }

        if (txtDireccionp.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar una dirección  de proveedor");
            txtDireccionp.requestFocusInWindow();
            return;
        }

        int rta = JOptionPane.showConfirmDialog(rootPane, "¿Esta seguro de modificar la información?");
        if (rta != 0) {
            return;
        }

        try {
            PreparedStatement pst = cn.prepareStatement("UPDATE proveedores SET nombre_proveedor='" + txtNombrep.getText()
                    + "',contacto_proveedor='" + txtContactop.getText()
                    + "',direccion_proveedor='" + txtDireccionp.getText()
                    + "', id_usuario_proveedor='" + cedula_usuario
                    + "'  WHERE nombre_proveedor='" + txtNombrep.getText() + "'");

            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Registro modificado con éxito");
        } catch (Exception e) {
            System.out.println("error al modificar");
        }
        Limpiar();
        txtNombrep.setText("");
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        Limpiar();
        txtNombrep.setText("");
        txtContactop.setEnabled(true);
        txtDireccionp.setText("");

    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        //validaciones
        if (txtNombrep.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar un nombre de proveedor");
            txtNombrep.requestFocusInWindow();
            return;
        }

        String nombre = "", contacto = "", direccion = "";
       //txtCodigo.setText("");

        nombre = txtNombrep.getText();

        conectar cc = new conectar();
        Connection cn = cc.conexion();

        String sql = "";

        try {
            sql = "SELECT * FROM proveedores WHERE nombre_proveedor = '" + txtNombrep.getText() + "'";
            Statement st = cn.createStatement();
            System.out.println(sql);
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {

                nombre = rs.getString("nombre_proveedor");
                contacto = rs.getString("contacto_proveedor");
                direccion = rs.getString("direccion_proveedor");

                System.out.println(nombre);

            }

            if (contacto.equals("") && direccion.equals("")) {
                JOptionPane.showMessageDialog(rootPane, "El proveedor no se encuentra");
            } else {

                txtNombrep.setText(nombre);
                txtContactop.setText(contacto);
                txtDireccionp.setText(direccion);

            }
        } catch (Exception e) {
        }


    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        conectar cc = new conectar(); //Se crea una instancia de la clase conectar
        Connection cn = cc.conexion(); //se crea una instancia de la clase Connection y se concatena el objeto cc
        String sql = "";

        if(txtNombrep.getText().equals("")){
        JOptionPane.showMessageDialog(rootPane, "Debe digitar el proveedor a eliminar");
        return;
        }
        
        int rta = JOptionPane.showConfirmDialog(rootPane, "¿Esta seguro de eliminar el registro?");
        if (rta != 0) {
            return;
        }

        try {
            sql = "DELETE FROM proveedores WHERE nombre_proveedor = '" + txtNombrep.getText() + "'";
            PreparedStatement st = cn.prepareStatement(sql);
            st.executeUpdate();

            JOptionPane.showMessageDialog(null, "Registro eliminado con éxito");
            Limpiar();
            txtNombrep.setText("");
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        if (evt.getButton() == 1) {
            int fila = jTable3.getSelectedRow();

            try {
                conectar cc = new conectar();
                Connection cn = cc.conexion();
                String sql = "SELECT * FROM proveedores Where nombre_proveedor = " + jTable3.getValueAt(fila, 0);
                System.out.println("sentencia sql es " + sql);

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                rs.next();
                System.out.println("el rs es ");
                System.out.println("el rs devolvio " + rs.getString("id_proveedor") + " " + rs.getString("nombre_proveedor"));

                txtNombrep.setText(rs.getString("nombre_proveedor"));
                txtContactop.setText(rs.getString("contacto_proveedor"));
                txtDireccionp.setText(rs.getString("direccion_proveedor"));

            } catch (Exception e) {
            }
        }

    }//GEN-LAST:event_jTable3MouseClicked

    private void txtNombrepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombrepKeyReleased
        // TODO add your handling code here:
        // filtrar_tabla(txtNombrep.getText());
    }//GEN-LAST:event_txtNombrepKeyReleased

    private void txtNombrepKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombrepKeyPressed
        SLetras(txtNombrep);
    }//GEN-LAST:event_txtNombrepKeyPressed

    private void txtContactopKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactopKeyPressed
        SNumeros(txtContactop);
    }//GEN-LAST:event_txtContactopKeyPressed

    private void btnProductos_asociadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductos_asociadosActionPerformed

        if (txtNombrep.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar el nombre de un proveedor");
            txtNombrep.requestFocus();
            return;
        }

        Materiales_Asociados mismateriales = new Materiales_Asociados(this, rootPaneCheckingEnabled);
        mismateriales.setLocationRelativeTo(null);
        mismateriales.setVisible(true);


    }//GEN-LAST:event_btnProductos_asociadosActionPerformed

    private void jbreporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbreporteActionPerformed
        try {

            conectar cc = new conectar();
            Connection cn = cc.conexion();
            //con.conectar();
            String dir = "C:\\Users\\Usuario\\Documents\\2016-1\\Implantar\\OrthoGarcia\\Orthogarcia 02052016\\OrthoGarcia08Diciembre\\src\\reportes\\reporte_proveedor.jrxml";
            JasperReport reporteJasper = JasperCompileManager.compileReport(dir);
            JasperPrint mostrarReporte = JasperFillManager.fillReport(reporteJasper, null, cn);
            JasperViewer.viewReport(mostrarReporte, false);

        } catch (JRException ex) {
            Logger.getLogger(frmProveedores_1.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jbreporteActionPerformed

    private void txtNombrepKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombrepKeyTyped
        txtNombrep.addKeyListener(new KeyAdapter() {
            public void keyReleased(final KeyEvent e) {
                String cadena = (txtNombrep.getText()).toLowerCase();
                txtNombrep.setText(cadena);
                repaint();
                filtro();
            }
        });
        tsrfiltro = new TableRowSorter(jTable3.getModel());
        jTable3.setRowSorter(tsrfiltro);
    }//GEN-LAST:event_txtNombrepKeyTyped

    /**
     * Funcion que trae el ultimo codigo de la base de datos
     *
     * @return Retorna una cadena de texto con el ultimo valor de la consulta en
     * la base de datos
     */
    /*public String Buscar_Codigo() {
     conectar cc = new conectar();
     Connection cn = cc.conexion();
     String sql = "";
     String registro[] = new String[1];
     String numerocodigo = "";

     try {
     sql = "SELECT * FROM proveedores ORDER BY Codigo ASC";
     Statement st = cn.createStatement();
     ResultSet rs = st.executeQuery(sql);
     while (rs.next()) {
     registro[0] = rs.getString("Codigo");

     }

     } catch (SQLException ex) {
     Logger.getLogger(frmProveedores_1.class.getName()).log(Level.SEVERE, null, ex);
     }
     numerocodigo = registro[0];
     return numerocodigo;
     }
     * ///
    

     /**
     * Metodo para limpiar los campos de la ventana
     */
    public void Limpiar() {

        txtNombrep.setText("");
        txtContactop.setText("");
        txtDireccionp.setText("");

    }

    /**
     * Metodo para habilitar los campos de la ventana
     */
    public void habilitar() {

        txtNombrep.setEnabled(true);
        txtContactop.setEnabled(true);
        txtDireccionp.setEnabled(true);

        btnGuardar.setEnabled(true);

        btnEliminar.setEnabled(true);

    }

    /**
     * Metodo para inhabilitar los campos de la ventana
     */
    public void inhabilitar() {

        txtNombrep.setEnabled(false);
        txtContactop.setEnabled(false);
        txtDireccionp.setEnabled(false);

    }

        /**
     * Funcion que busca la existencia de el nombre de un proveedor a ingresar
     *
     * @return Retorna el id del proveedor si lo encuentra
     * @param  nombreProveedor recibe el nombre de proveedor a buscar
     */
    
        public int BuscarExistenciaProveedor(String NombreProveedor) {
        int id=0;
        try {
            conectar cc = new conectar();
            Connection cn = cc.conexion();
            
            String sql="select id_proveedor from proveedores where nombre_proveedor='"+NombreProveedor+"'";
            PreparedStatement pst=cn.prepareStatement(sql);
            ResultSet rs=pst.executeQuery();
            
            while (rs.next()) {                
                id=rs.getInt("id_proveedor");
            }
           
        } catch (SQLException ex) {
            Logger.getLogger(frmProveedores_1.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id ;
        
    }
        
        
    /**
     *
     * Metodo que no deja ingresar otro tipo de datos diferentes a numero en un
     * campo de texto
     *
     * @param a información en el campo de texto
     */
    public void SNumeros(JTextField a) {
        a.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) {
                    getToolkit().beep();
                    e.consume();
                }
            }
        });
    }

    /**
     *
     * Metodo que no deja ingresar otro tipo de datos diferentes a letras en un
     * campo de texto
     *
     * @param a información en el campo de texto
     */
    public void SLetras(JTextField a) {
        a.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (Character.isDigit(c)) {
                    getToolkit().beep();
                    e.consume();
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnProductos_asociados;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JButton jbreporte;
    private javax.swing.JTextField txtContactop;
    private javax.swing.JTextField txtDireccionp;
    public static javax.swing.JTextField txtNombrep;
    // End of variables declaration//GEN-END:variables

    /**
     * Meotodo que asigna un nuevo codigo
     *
     * @return Un entero el cual es el nuevo codigo
     */
    private int Nuevo_Codigo() {
        conectar cc = new conectar();
        Connection cn = cc.conexion();
        String sql = "";
        String registro[] = new String[1];
        String numerocodigo = "";

        try {
            sql = "SELECT id_proveedor FROM proveedores ORDER BY id_proveedor ASC";
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                registro[0] = rs.getString("id_proveedor");

            }

        } catch (SQLException ex) {
            Logger.getLogger(frmMatcons.class.getName()).log(Level.SEVERE, null, ex);
        }
        numerocodigo = registro[0];
        int possig = 0;
        if (numerocodigo == null) {
            numerocodigo = "0";
        }
        possig = Integer.parseInt(numerocodigo) + 1;
        return possig;
    }

    
        /**
     * Meotodo que inicia la tabla de la ventana
     *
     * 
     */
    public void iniciar_tabla() {

        try {
            conectar cc = new conectar();
            Connection cn = cc.conexion();
            String[] titulos = new String[4];
            titulos[0] = "Código Proveedor";
            titulos[1] = "Nombre Proveedor";
            titulos[2] = "Contacto";
            titulos[3] = "Dirección";
            String sql = "select * from proveedores";
            modelo = new DefaultTableModel(null, titulos);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            String[] filas = new String[6];
            String[] registro = new String[4];

            while (rs.next()) {
                registro[0] = rs.getString("id_proveedor");
                registro[1] = rs.getString("nombre_proveedor");
                registro[2] = rs.getString("contacto_proveedor");
                registro[3] = rs.getString("direccion_proveedor");

                modelo.addRow(registro);

            }
            jTable3.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(frmProveedores_1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void filtrar_tabla(String valor) {

        try {
            conectar cc = new conectar();
            Connection cn = cc.conexion();
            String[] titulos = new String[4];
            titulos[0] = "Código";
            titulos[1] = "Nombre";
            titulos[2] = "Contacto";
            titulos[3] = "Producto";

            String sql = "select * from proveedores where concat (nombre_proveedor, ' ' ,contacto_proveedor) like '%" + valor + "%'";
            modelo = new DefaultTableModel(null, titulos);
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            String[] filas = new String[3];
            String[] registro = new String[7];

            while (rs.next()) {
                registro[1] = rs.getString("id_proveedor");
                registro[2] = rs.getString("nombre_proveedor");
                registro[3] = rs.getString("contacto_proveedor");
                registro[4] = rs.getString("direccion_proveedor");

                filas[0] = registro[2];
                filas[1] = registro[5];
                filas[2] = registro[6];
                modelo.addRow(filas);

            }
            jTable3.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(frmProveedores_1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    //metodo para filtrar en la tabla de proveedores
    public void filtro(){
    tsrfiltro.setRowFilter(RowFilter.regexFilter(txtNombrep.getText(), 1));
    }

}
